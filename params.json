{"name":"Beetle.js","tagline":"Javascript ORM, manage your data easily.","body":"Beetle.js\r\n=========\r\nBeetle is a data manager for Javascript.\r\nThe goal is to be able to work with data as easy as Entity Framework and LINQ.\r\n\r\n\r\n##Features\r\n* Tracks objects and persists changes to server\r\n* Can work with Knockout and Angular objects (Backbone soon, and others can be implemented easily)\r\n* Can work with Q and jQuery promises\r\n* Supports data model inheritance\r\n* Supports aggregate functions\r\n* Can work without metadata\r\n* Can work with Mvc and WebApi Controllers\r\n* Supports property, entity validations\r\n* Can use existing data annotation validations (carries multi-language resource messages to client)\r\n* Can query server with Http POST\r\n* Can be extended to support almost every library (client and server side), flexible architecture\r\n* Auto fix navigation properties (after foreign key set, entity attach etc..)\r\n* Can check-auto convert values for its proper data types\r\n* Can be internationalized (for internal messages, validation messages etc..)\r\n\r\n##Current prerequisities\r\nAll dependencies have base types so custom implementations can be made easily.\r\n* Entity Framework\r\n* WebApi or Asp.Net Mvc project for service\r\n* Knockout.js or EcmaScript5 Properties (for Angular) for providing observable objects\r\n* JQuery for ajax operations\r\n\r\n##Usage\r\n* Create a Controller and inherit from BeetleApiController, generic argument tells we are using Entity Framework context handler with TestEntities context (DbContext)\r\n```cs\r\npublic class BeetleTestController : BeetleApiController<EFContextHandler<TestEntities>> {\r\n\t\t\r\n\t[HttpGet]\r\n\tpublic IQueryable<Entity> Entities() {\r\n\t\treturn ContextHandler.Context.Entities;\r\n\t}\r\n}\r\n```\r\n* Configure routing\r\n```cs\r\npublic static class BeetleWebApiConfig {\r\n\r\n\tpublic static void RegisterBeetlePreStart() {\r\n\t\tGlobalConfiguration.Configuration.Routes.MapHttpRoute(\"BeetleApi\", \"api/{controller}/{action}\");\r\n\t}\r\n}\r\n```\r\n* Create an entity manager\r\n```javascript\r\nvar manager = new EntityManager('api/Test');\r\n```\r\n* Create a query\r\n```javascript\r\nvar query = manager.createQuery('Entities').where('e => e.Name != null');\r\n```\r\n* Execute the query and edit the data\r\n```javascript\r\nmanager.executeQuery(query)\r\n\t.then(function (data) {\r\n\t\tself.entities = data;\r\n        data[0].UserNameCreate = 'Test Name';\r\n    })\r\n```\r\n* Execute local query\r\n```javascript\r\nvar hasCanceled = self.entities.asQueryable().any('e => e.IsCanceled == true').execute();\r\n// q is shortcut for asQueryable, x is shortcut for execute\r\nvar hasDeleted = self.entities.q().any('e => e.IsDeleted').x();\r\n// alias is optional\r\nvar hasDeleted = self.entities.q().any('IsDeleted').x();\r\n\r\n// with beetle.queryExtensions.js we can write queries like these;\r\n// this query will be executed immediately and returns true or false\r\nvar hasExpired = self.entities.any('IsExpired == true');\r\n// below query will be executed after it's length property is accessed (like LINQ GetEnumerator)\r\nvar news = self.entities.where('IsNew');\r\n```\r\n* Add a new entity\r\n```javascript\r\nvar net = manager.createEntity('EntityType', {Id: beetle.helper.createGuid()});\r\nnet.Name = 'Test EntityType';\r\n```\r\n* Delete an entity\r\n```javascript\r\nmanager.deleteEntity(net);\r\n```\r\n* Save all changes\r\n```javascript\r\nmanager.saveChanges()\r\n    .then(function () {\r\n        alert('Save succesfull');\r\n    })\r\n```\r\n\r\n##Supported Data Types\r\nstring, guid, date, dateTimeOffset, time, boolean, int, number (for float, decimal, etc..), byte, enum, binary, geometry, geography (spatial types are supported partially, can be fully supported once we decide how to represent them at client side)\r\n\r\n##Validators\r\nrequired, stringLength, maximumLength, minimumLength, range, emailAddress, creditCard, url, phone, postalCode, time, regularExpression, compare\r\n\r\n##Supported Query Expressions\r\nofType, where, orderBy, expand (include), select, skip, top (take), groupBy, distinct, reverse, selectMany, skipWhile, takeWhile, all, any, avg, max, min, sum, count, first, firstOrDefault, single, singleOrDefault, last, lastOrDefault\r\n\r\n##Supported Query Functions\r\ntoupper, tolower, substring, substringof, length, trim, concat, replace, startswith, endswith, indexof, round, ceiling, floor, second, minute, hour, day, month, year, max, min, sum, count, avg, any, all, contains\r\n(can be used in expression strings, some are not supported by OData but can be used with beetle query string format)\r\n\r\n##License\r\nSee [License](https://github.com/umutozel/Beetle.js/blob/master/LICENSE)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}